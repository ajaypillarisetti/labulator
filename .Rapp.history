qe <- length(strsplit(x,"/")[[1]])
strsplit(x,"/")[[1]][qe]
fn.loc <- strsplit(x,"/")[[1]]
fn.loc
fn.loc <- strsplit(x,"/")[[1]][length(strsplit(x,"/")[[1]])]
fn.loc
filename
basename(x)
filename <- basename(x)
basename
read.micropem <- function(x, tzone='Asia/Kathmandu', output=T){#
    #Non-filename metadata#
    serial_no <- as.data.table(read.csv(x, stringsAsFactor=F, skip=3,nrow=1, header=F))[,V2]#
#
    #file input#
    #read.csv and then as.data.table because fread doesn't cooperate with blank lines (which appear common)#
    inFile <- as.data.table(read.csv(x, header=F, skip=26, stringsAsFactor=F))#
#
    setnames(inFile, c("date","time",  "neph"  ,"temp",  "rh",  "batt",  "inlet.pres",  "orifice.pres",  "flow",  "accel.x",  "accel.y",    "accel.z",  "accel.comp", "button"))#
    inFile[,datetime:=ymd_hms(paste(date, time, sep=" "), tz=tzone)]#
    if(all(inFile[,is.na(datetime)])){inFile[,datetime:=mdy_hms(paste(date, time, sep=" "), tz=tzone)]}#
    inFile[,date:=NULL]#
    inFile[,time:=NULL]#
    setcolorder(inFile, c(13, 1:12))#
    inFile[button=="", button:=NA]#
    inFile[!is.na(button), period:="Alert"]#
#
    # zero periods#
    zero1.start <- inFile[!is.na(neph), min(datetime)+120]#
    zero1.stop <- zero1.start + 300#
    zero2.start <- inFile[!is.na(neph), max(datetime)-420]#
    zero2.stop <- zero2.start + 300#
    zero1 <- inFile[!is.na(neph)&datetime>=zero1.start & datetime<=zero1.stop, period:='zero1'][period=='zero1']#
    zero2 <- inFile[!is.na(neph)&datetime>=zero2.start & datetime<=zero2.stop, period:='zero2'][period=='zero2']#
    zeros <- list(zero1=zero1, zero2=zero2)#
#
    #Alerts / button presses#
    alerts <- inFile[period=='Alert', c('datetime','button'), with=F]#
#
    #data#
    datafile <- inFile[is.na(period)]#
    #create rounded datetime for averaging#
    datafile[,round.dt:=datetime-second(datetime)]#
    dt.mins <- datafile[,list(#
        neph        =   round(mean(neph, na.rm=T),3),#
        temp        =   round(mean(temp, na.rm=T),3),#
        rh          =   round(mean(rh, na.rm=T),3),#
        batt        =   round(mean(batt, na.rm=T),3),#
        inlet.pres  =   round(mean(inlet.pres, na.rm=T),3),#
        orifice.pres=   round(mean(orifice.pres, na.rm=T),3),#
        flow        =   round(mean(flow, na.rm=T),3),#
        accel.x     =   round(mean(accel.x, na.rm=T),3),#
        accel.y     =   round(mean(accel.y, na.rm=T),3),#
        accel.z     =   round(mean(accel.z, na.rm=T),3),#
        accel.comp  =   round(mean(accel.comp, na.rm=T),3)#
        ),by=round.dt#
    ]#
    setnames(dt.mins, 'round.dt', 'datetime')#
    #valid neph data#
    dt.mins.neph <- dt.mins[!is.na(neph)]#
#
    if(output){list(zero1=zero1, zero2=zero2, alerts=alerts, neph.data=dt.mins.neph, full.data=datafile)}#
}
read.micropem(x)
read.micropem(x, output=F)
a <- read.micropem(x, output=F)
a
a <- read.micropem(x)
a
a$full.data[,filename:=filename]
a
a <- read.micropem(x)
output
output <- read.micropem(x)
output
str(output)
filename
hhid <- strsplit(filename, "-")[[1]][1]
hhid
devid <- strsplit(filename, "-")[[1]][2]
names(output)
loc <- strsplit(filename, "-")[[1]][3]
loc
lapply(names(output), function(x){#
        x[,hhid:=hhid]#
        x[,devid:=devid]#
        x[,loc:=loc]#
    })
output$x[,hhid:=hhid]
lapply(names(output), function(x){#
        output$x[,hhid:=hhid]#
        output$x[,devid:=devid]#
        output$x[,loc:=loc]#
    })
names(output)
library(plyr)
llply(names(output), function(x){#
        output$x[,hhid:=hhid]#
        output$x[,devid:=devid]#
        output$x[,loc:=loc]#
    })
lapply(names(output), function(x)#
        output$x[,hhid:=hhid]#
    )
output
names(output)
names(output)[1]
get(names(output)[1])
get(names(output)[2])
get(names(output)[3])
get(names(output)[4])
output
get(names(output))
names(output)
names(output)[1]
output%names(output)[1]
output$names(output)[1]
output$get(names(output)[1])
lapply(names(output), function(x)#
        x[,hhid:=hhid]#
    )
names(output)
output <- read.micropem(x)
lapply(names(output), function(x)#
        output$x[,hhid:=hhid]#
    )
output$x[,hhid:=hhid]
hhid
lapply(output, function(x)#
        output$x[,hhid:=hhid]#
    )
lapply(output, function(x)#
        {x[,hhid:=hhid]; x}#
    )
lapply(output, function(x){#
        x[,hhid:=hhid]#
        x[,devid:=devid]#
        x[,loc:=loc]#
    }
)
nepal.micropem <- function(x){#
    filename <- basename(x)#
    hhid <- strsplit(filename, "-")[[1]][1]#
    devid <- strsplit(filename, "-")[[1]][2]#
    loc <- strsplit(filename, "-")[[1]][3]#
#
    output <- read.micropem(x)#
#
    lapply(output, function(x){x[,hhid:=hhid];x[,devid:=devid];x[,loc:=loc]})#
#
}
nepal.micropem(x)
read.micropem <- function(x, tzone='Asia/Kathmandu'){#
    #Non-filename metadata#
    serial_no <- as.data.table(read.csv(x, stringsAsFactor=F, skip=3,nrow=1, header=F))[,V2]#
#
    #file input#
    #read.csv and then as.data.table because fread doesn't cooperate with blank lines (which appear common)#
    inFile <- as.data.table(read.csv(x, header=F, skip=26, stringsAsFactor=F))#
#
    setnames(inFile, c("date","time",  "neph"  ,"temp",  "rh",  "batt",  "inlet.pres",  "orifice.pres",  "flow",  "accel.x",  "accel.y",    "accel.z",  "accel.comp", "button"))#
    inFile[,datetime:=ymd_hms(paste(date, time, sep=" "), tz=tzone)]#
    if(all(inFile[,is.na(datetime)])){inFile[,datetime:=mdy_hms(paste(date, time, sep=" "), tz=tzone)]}#
    inFile[,date:=NULL]#
    inFile[,time:=NULL]#
    setcolorder(inFile, c(13, 1:12))#
    inFile[button=="", button:=NA]#
    inFile[!is.na(button), period:="Alert"]#
#
    # zero periods#
    zero1.start <- inFile[!is.na(neph), min(datetime)+120]#
    zero1.stop <- zero1.start + 300#
    zero2.start <- inFile[!is.na(neph), max(datetime)-420]#
    zero2.stop <- zero2.start + 300#
    zero1 <- inFile[!is.na(neph)&datetime>=zero1.start & datetime<=zero1.stop, period:='zero1'][period=='zero1']#
    zero2 <- inFile[!is.na(neph)&datetime>=zero2.start & datetime<=zero2.stop, period:='zero2'][period=='zero2']#
    zeros <- list(zero1=zero1, zero2=zero2)#
#
    #Alerts / button presses#
    alerts <- inFile[period=='Alert', c('datetime','button'), with=F]#
#
    #data#
    datafile <- inFile[is.na(period)]#
    #create rounded datetime for averaging#
    datafile[,round.dt:=datetime-second(datetime)]#
    dt.mins <- datafile[,list(#
        neph        =   round(mean(neph, na.rm=T),3),#
        temp        =   round(mean(temp, na.rm=T),3),#
        rh          =   round(mean(rh, na.rm=T),3),#
        batt        =   round(mean(batt, na.rm=T),3),#
        inlet.pres  =   round(mean(inlet.pres, na.rm=T),3),#
        orifice.pres=   round(mean(orifice.pres, na.rm=T),3),#
        flow        =   round(mean(flow, na.rm=T),3),#
        accel.x     =   round(mean(accel.x, na.rm=T),3),#
        accel.y     =   round(mean(accel.y, na.rm=T),3),#
        accel.z     =   round(mean(accel.z, na.rm=T),3),#
        accel.comp  =   round(mean(accel.comp, na.rm=T),3)#
        ),by=round.dt#
    ]#
    setnames(dt.mins, 'round.dt', 'datetime')#
    #valid neph data#
    dt.mins.neph <- dt.mins[!is.na(neph)]#
#
    list(zero1=zero1, zero2=zero2, alerts=alerts, neph.data=dt.mins.neph, full.data=datafile[,round.dt:=NULL])#
}
nepal.micropem(x)
pem.files <- list.files('~/Desktop/KAPS Air Pollution Data', recursive=T, include.dirs=T, full.names=T, pattern='PEM')#
pem.files <- grep('raw',pem.files,invert=T,value=T)#
pem.files <- grep('csv',pem.files,invert=F,value=T)#
#
x <- sample(pem.files,1)
nepal.micropem(x)
read.micropem <- function(x, tzone='Asia/Kathmandu'){#
    #Non-filename metadata#
    serial_no <- as.data.table(read.csv(x, stringsAsFactor=F, skip=3,nrow=1, header=F))[,V2]#
#
    #file input#
    #read.csv and then as.data.table because fread doesn't cooperate with blank lines (which appear common)#
    inFile <- as.data.table(read.csv(x, header=F, skip=26, stringsAsFactor=F))#
#
    setnames(inFile, c("date","time",  "neph"  ,"temp",  "rh",  "batt",  "inlet.pres",  "orifice.pres",  "flow",  "accel.x",  "accel.y",    "accel.z",  "accel.comp", "button"))#
    inFile[,datetime:=ymd_hms(paste(date, time, sep=" "), tz=tzone)]#
    if(all(inFile[,is.na(datetime)])){inFile[,datetime:=mdy_hms(paste(date, time, sep=" "), tz=tzone)]}#
    inFile[,date:=NULL]#
    inFile[,time:=NULL]#
    setcolorder(inFile, c(13, 1:12))#
    inFile[button=="", button:=NA]#
    inFile[!is.na(button), period:="Alert"]#
#
    # zero periods#
    zero1.start <- inFile[!is.na(neph), min(datetime)+120]#
    zero1.stop <- zero1.start + 300#
    zero2.start <- inFile[!is.na(neph), max(datetime)-420]#
    zero2.stop <- zero2.start + 300#
    zero1 <- inFile[!is.na(neph)&datetime>=zero1.start & datetime<=zero1.stop, period:='zero1'][period=='zero1']#
    zero2 <- inFile[!is.na(neph)&datetime>=zero2.start & datetime<=zero2.stop, period:='zero2'][period=='zero2']#
    zeros <- list(zero1=zero1, zero2=zero2)#
#
    #Alerts / button presses#
    alerts <- inFile[period=='Alert', c('datetime','button'), with=F]#
#
    #data#
    datafile <- inFile[is.na(period)]#
    #create rounded datetime for averaging#
    datafile[,round.dt:=datetime-second(datetime)]#
    dt.mins <- datafile[,list(#
        neph        =   round(mean(neph, na.rm=T),3),#
        temp        =   round(mean(temp, na.rm=T),3),#
        rh          =   round(mean(rh, na.rm=T),3),#
        batt        =   round(mean(batt, na.rm=T),3),#
        inlet.pres  =   round(mean(inlet.pres, na.rm=T),3),#
        orifice.pres=   round(mean(orifice.pres, na.rm=T),3),#
        flow        =   round(mean(flow, na.rm=T),3),#
        accel.x     =   round(mean(accel.x, na.rm=T),3),#
        accel.y     =   round(mean(accel.y, na.rm=T),3),#
        accel.z     =   round(mean(accel.z, na.rm=T),3),#
        accel.comp  =   round(mean(accel.comp, na.rm=T),3)#
        ),by=round.dt#
    ]#
    setnames(dt.mins, 'round.dt', 'datetime')#
    #valid neph data#
    dt.mins.neph <- dt.mins[!is.na(neph)]#
#
    list(zero1=zero1, zero2=zero2, alerts=alerts, neph.data=dt.mins.neph, full.data=datafile[,round.dt:=NULL])#
}#
#
nepal.micropem <- function(x){#
    filename <- basename(x)#
    hhid <- strsplit(filename, "-")[[1]][1]#
    devid <- strsplit(filename, "-")[[1]][2]#
    loc <- strsplit(filename, "-")[[1]][3]#
#
    output <- read.micropem(x)#
#
    lapply(output, function(x){x[,hhid:=hhid];x[,devid:=devid];x[,loc:=loc]})#
}
nepal.micropem(x)
x <- '~/Desktop/KAPS Air Pollution Data/KS0917/KS0917-PEM0001-PERS-2015-03-18..csv'
x
read.nepal.micropem(x)
nepal.micropem(x)
serial_no <- as.data.table(read.csv(x, stringsAsFactor=F, skip=3,nrow=1, header=F))[,V2]
serial_no
inFile <- as.data.table(read.csv(x, header=F, skip=26, stringsAsFactor=F))
inFile
setnames(inFile, c("date","time",  "neph"  ,"temp",  "rh",  "batt",  "inlet.pres",  "orifice.pres",  "flow",  "accel.x",  "accel.y",    "accel.z",  "accel.comp", "button"))#
    inFile[,datetime:=ymd_hms(paste(date, time, sep=" "), tz=tzone)]#
    if(all(inFile[,is.na(datetime)])){inFile[,datetime:=mdy_hms(paste(date, time, sep=" "), tz=tzone)]}#
    inFile[,date:=NULL]#
    inFile[,time:=NULL]
tzone='Asia/Kathmandu'
inFile <- as.data.table(read.csv(x, header=F, skip=26, stringsAsFactor=F))#
#
    setnames(inFile, c("date","time",  "neph"  ,"temp",  "rh",  "batt",  "inlet.pres",  "orifice.pres",  "flow",  "accel.x",  "accel.y",    "accel.z",  "accel.comp", "button"))#
    inFile[,datetime:=ymd_hms(paste(date, time, sep=" "), tz=tzone)]#
    if(all(inFile[,is.na(datetime)])){inFile[,datetime:=mdy_hms(paste(date, time, sep=" "), tz=tzone)]}#
    inFile[,date:=NULL]#
    inFile[,time:=NULL]#
    setcolorder(inFile, c(13, 1:12))#
    inFile[button=="", button:=NA]#
    inFile[!is.na(button), period:="Alert"]
inFile
zero1.start <- inFile[!is.na(neph), min(datetime)+120]
?complete.cases
complete.cases(inFile)
complete.cases(c(1,1,1,1,1))
install.packages('accelerometry')
library(accelorometry)
library(accelerometry)
?accel.process.tri
a
output
ls()
inFile
pem.files <- list.files('~/Desktop/KAPS Air Pollution Data', recursive=T, include.dirs=T, full.names=T, pattern='PEM')#
pem.files <- grep('raw',pem.files,invert=T,value=T)#
pem.files <- grep('csv',pem.files,invert=F,value=T)#
#
x <- sample(pem.files,1)#
nepal.micropem(x)
ab <- nepal.micropem(x)
ab
ab[,3:6]
ab[,c(3:6)]
ab[,c(3:6), with=F]
ab$full.data[,c(3:6), with=F]
ab$full.data[,c(5:6), with=F]
ab$full.data[,c(5:9), with=F]
ab$full.data[,c(9:11), with=F]
accel.process.tri(counts.tri=ab$full.data[,c(9:11), with=F])
ab <- ab$full.data
ab
qplot(datetime, value, data=melt(ab, measure.var=c('accel.x','accel.y','accel.z','accel.comp'), id.var='datetime'))
library(reshape2)
qplot(datetime, value, data=melt(ab, measure.var=c('accel.x','accel.y','accel.z','accel.comp'), id.var='datetime'))
qplot(datetime, value, data=melt(ab, measure.var=c('accel.x','accel.y','accel.z','accel.comp'), id.var='datetime'), color=variable, geom='line')
qplot(datetime, value, data=melt(ab, measure.var=c('accel.x','accel.y','accel.z','accel.comp'), id.var='datetime'), color=variable)
ab
ab[,round.dt:=datetime-second(datetime)]
ab
serial_no <- as.data.table(read.csv(x, stringsAsFactor=F, skip=3,nrow=1, header=F))[,V2]#
#
    #file input#
    #read.csv and then as.data.table because fread doesn't cooperate with blank lines (which appear common)#
    inFile <- as.data.table(read.csv(x, header=F, skip=26, stringsAsFactor=F))#
#
    setnames(inFile, c("date","time",  "neph"  ,"temp",  "rh",  "batt",  "inlet.pres",  "orifice.pres",  "flow",  "accel.x",  "accel.y",    "accel.z",  "accel.comp", "button"))#
    inFile[,datetime:=ymd_hms(paste(date, time, sep=" "), tz=tzone)]#
    if(all(inFile[,is.na(datetime)])){inFile[,datetime:=mdy_hms(paste(date, time, sep=" "), tz=tzone)]}#
    inFile[,date:=NULL]#
    inFile[,time:=NULL]#
    setcolorder(inFile, c(13, 1:12))#
    inFile[button=="", button:=NA]#
    inFile[!is.na(button), period:="Alert"]#
#
    # zero periods#
    zero1.start <- inFile[!is.na(neph), min(datetime)+120]#
    zero1.stop <- zero1.start + 300#
    zero2.start <- inFile[!is.na(neph), max(datetime)-420]#
    zero2.stop <- zero2.start + 300#
    zero1 <- inFile[!is.na(neph)&datetime>=zero1.start & datetime<=zero1.stop, period:='zero1'][period=='zero1']#
    zero2 <- inFile[!is.na(neph)&datetime>=zero2.start & datetime<=zero2.stop, period:='zero2'][period=='zero2']#
    zeros <- list(zero1=zero1, zero2=zero2)#
#
    #Alerts / button presses#
    alerts <- inFile[period=='Alert', c('datetime','button'), with=F]#
#
    #data#
    datafile <- inFile[is.na(period)]#
    #create rounded datetime for averaging#
    datafile[,round.dt:=datetime-second(datetime)]#
    dt.mins <- datafile[,list(#
        neph        =   round(mean(neph, na.rm=T),3),#
        temp        =   round(mean(temp, na.rm=T),3),#
        rh          =   round(mean(rh, na.rm=T),3),#
        batt        =   round(mean(batt, na.rm=T),3),#
        inlet.pres  =   round(mean(inlet.pres, na.rm=T),3),#
        orifice.pres=   round(mean(orifice.pres, na.rm=T),3),#
        flow        =   round(mean(flow, na.rm=T),3),#
        accel.x     =   round(mean(accel.x, na.rm=T),3),#
        accel.y     =   round(mean(accel.y, na.rm=T),3),#
        accel.z     =   round(mean(accel.z, na.rm=T),3),#
        accel.comp  =   round(mean(accel.comp, na.rm=T),3)#
        ),by=round.dt#
    ]#
    setnames(dt.mins, 'round.dt', 'datetime')#
    #valid neph data#
    dt.mins.neph <- dt.mins[!is.na(neph)]
dt.mins
dt.mins <- datafile[,list(#
        neph        =   round(mean(neph, na.rm=T),3),#
        temp        =   round(mean(temp, na.rm=T),3),#
        rh          =   round(mean(rh, na.rm=T),3),#
        batt        =   round(mean(batt, na.rm=T),3),#
        inlet.pres  =   round(mean(inlet.pres, na.rm=T),3),#
        orifice.pres=   round(mean(orifice.pres, na.rm=T),3),#
        flow        =   round(mean(flow, na.rm=T),3),#
        accel.x     =   round(mean(accel.x, na.rm=T),3),#
        accel.y     =   round(mean(accel.y, na.rm=T),3),#
        accel.z     =   round(mean(accel.z, na.rm=T),3),#
        accel.comp  =   round(mean(accel.comp, na.rm=T),3),#
        accel.x.sd  =   round(sd(accel.x, na.rm=T),3),#
        accel.y.sd  =   round(sd(accel.y, na.rm=T),3),#
        accel.z.sd  =   round(sd(accel.z, na.rm=T),3),#
        accel.comp.sd=  round(sd(accel.comp, na.rm=T),3)#
        ),by=round.dt#
    ]
dt.mins
dt.mins[,grep(accel, colnames(dt.mins),value=T)]
dt.mins[,grep('accel', colnames(dt.mins),value=T)]
dt.mins[,grep('accel', colnames(dt.mins),value=T),with=F]
dt.mins[,c('datetime', 'neph', grep('accel', colnames(dt.mins),value=T)),with=F]
dt.mins[,c('round.dt', 'neph', grep('accel', colnames(dt.mins),value=T)),with=F]
comp.long <- melt(dt.mins[,c('round.dt', 'neph', grep('accel', colnames(dt.mins),value=T)),with=F], id.var='round.dt')
comp.long
qplot(round.dt, value, data=comp.long, color=variable)
qplot(round.dt, value, data=comp.long[variable!='neph'], color=variable)
qplot(round.dt, value, data=comp.long[variable!='neph' & variable %in% grep('.sd',variable,value=T)], color=variable)
qplot(round.dt, value, data=comp.long[variable!='neph' & variable %in% grep('.sd',variable,value=T)], color=variable, geom='line')
qplot(round.dt, value, data=comp.long[variable!='neph' & variable %in% grep('.sd',variable,value=T) & value>0.02], color=variable, geom='line')
qplot(round.dt, value, data=comp.long[variable!='neph' & variable %in% grep('.sd',variable,value=T) & value>0.02], color=variable)
qplot(value, data=comp.long[variale==accel.comp.sd])
qplot(value, data=comp.long[variable=='accel.comp.sd'])
qplot(value, data=comp.long[variable=='accel.comp.sd'], log=x)
qplot(value, data=comp.long[variable=='accel.comp.sd'], log='x')
qplot(value, data=comp.long[variable=='accel.comp.sd'])
qplot(value, data=comp.long[variable=='accel.comp.sd'])+scale_x_continyous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.comp.sd'])+scale_x_continuous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.comp.sd'],binwidth=100)+scale_x_continuous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.comp.sd'],binwidth=0.02)+scale_x_continuous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.comp.sd'],binwidth=0.01)+scale_x_continuous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.x.sd'],binwidth=0.01)+scale_x_continuous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.y.sd'],binwidth=0.01)+scale_x_continuous(breaks=seq(0,0.5,0.02))
qplot(value, data=comp.long[variable=='accel.z.sd'],binwidth=0.01)+scale_x_continuous(breaks=seq(0,0.5,0.02))
comp.long <- dt.mins[,c('round.dt', 'neph', grep('accel', colnames(dt.mins),value=T)),with=F]
compliance <- dt.mins[,c('round.dt', 'neph', grep('accel', colnames(dt.mins),value=T)),with=F]
compliance
dt.mins.neph
dt.mins.neph <- dt.mins[!is.na(neph)]
dt.mins.neph
dt.mins.neph[accel.comp.sd>0.02, compliant:=1]
dt.mins.neph
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, compliant))
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, compliant), color=compliance)
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, compliant), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.x), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.comp), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.comp*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.x*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.y*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.x*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.d*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.z*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.z.sd*1000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.z.sd*10000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.comp.sd*10000), color='red')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.comp.sd*10000), color='red')+geom_line(aes(round.dt, accel.x.sd*10000), color='blue')+geom_line(aes(round.dt, accel.y.sd*10000), color='yellow')+geom_line(aes(round.dt, accel.z.sd*10000), color='green')
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.comp.sd*10000), color='red')+geom_line(aes(round.dt, accel.x.sd*10000), color='blue')+geom_line(aes(round.dt, accel.y.sd*10000), color='yellow')+geom_line(aes(round.dt, accel.z.sd*10000), color='green', jitter=2)
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, accel.comp.sd*10000), color='red')+geom_line(aes(round.dt, 1000+accel.x.sd*10000), color='blue')+geom_line(aes(round.dt, 2000+accel.y.sd*10000), color='yellow')+geom_line(aes(round.dt, 3000+accel.z.sd*10000), color='green', jitter=2)
qplot(round.dt, neph, data=dt.mins.neph, geom='line')+geom_line(aes(round.dt, 6000+accel.comp.sd*10000), color='red')+geom_line(aes(round.dt, 1000+accel.x.sd*10000), color='blue')+geom_line(aes(round.dt, 2000+accel.y.sd*10000), color='yellow')+geom_line(aes(round.dt, 3000+accel.z.sd*10000), color='green', jitter=2)
library(foreign)
?foreign
??foreign
read.dta('~/Downloads/IABR52FL/IABR52FL.DAT')
library(foreign)
library(data.table)
as.data.table(read.dta('~/Downloads/IA_2005-06_DHS_04062015_2048_20771/iabr52dt/IABR52FL.dta'))
library(repmist)
library(repmis)
library(data.table)
library(plur)
library(plyr)
library(reshape2)
library(httr)
a <- GET('https://www.dropbox.com/s/b8dyxurmf1or2xr/Filter%20room%20daignostic%20real%20time%20trace.txt?dl=0#
')
a
sadas
sadsa
adsadsa
library(dygraphs)
?dyevent
?dyEvent
library(lubridate)#
library(plyr)#
library(ggplot2)#
library(data.table)#
library(reshape2)#
library(scales)#
library(devtools)#
library(splines)#
library(lme4)#
library(gridExtra)
x <- '~/Dropbox/Bangladesh_Winrock_2013/Results/SUMS DATA/Barisal/SUMS Data KPT - Jan 25th 2013-tw/DTS_03_Traditional_Stove_KPT_SUMS_25_01_2013.csv'
x
fileCheck <- file.info(x)$size>0
fileCheck
notes <- head(read.csv(x, header=F),21)[,1]#
        notes <- as.character(notes[1:21])#
        device <- substring(strsplit(notes[1],":")[[1]][2],2,9)#
        if(device=="DS1921G-"){device <- "DS1921G"}#
        if(device=="DS1922/D"){device <- "DS1922X"}
notes
device
startimport <- grep("Value",notes)
startimport
sums <- as.data.table(read.csv(x, skip=startimport, header=F, stringsAsFactors=F))
sums
sums[,device_id:=device]
sums
setnames(sums,1:3, c('datetime','unit','temp'))
sums
tzone="Asia/Kathmandu"
sums[,datetime:=mdy_hms(datetime, tz=tzone)]
sums
interval <- as.numeric(sums[2, datetime] - sums[1, datetime])#
            sums[,datetime:=round.minutes(datetime,interval)]
round.minutes <- function(x, noOfMinutes=5){#
    tz <- tz(x[1])#
    class <- class(x[1])#
    structure((noOfMinutes*60) * (as.numeric(x + (noOfMinutes*60*0.5)) %/% (noOfMinutes*60)), class=class,tz=tz)#
}
interval <- as.numeric(sums[2, datetime] - sums[1, datetime])#
            sums[,datetime:=round.minutes(datetime,interval)]
sums
qplot(datetime, temp, data=sums)
qplot(datetime, temp, data=sums, geom='line')+theme_bw(12)
qplot(datetime, temp, data=sums, geom='line')+theme_bw(12)+ylim(c(0,125))
inFileFix <- function(x){#
    dta <- read.sum(x$datapath, x$name)#
}
x
inFileFix(x)
read.sum <- function(x, fileName, saveFile=F, tzone="Asia/Kathmandu", dataTable=T, makeLong=F, roundTime=T){#
    fileCheck <- file.info(x)$size>0#
    if(fileCheck){#
        #get device type from SUMS header; clean/format#
        notes <- head(read.csv(x, header=F),21)[,1]#
        notes <- as.character(notes[1:21])#
        device <- substring(strsplit(notes[1],":")[[1]][2],2,9)#
        if(device=="DS1921G-"){device <- "DS1921G"}#
        if(device=="DS1922/D"){device <- "DS1922X"}#
        #find line at which to begin import#
        startimport <- grep("Value",notes)#
        #import SUMs file#
        sums <- as.data.table(read.csv(x, skip=startimport, header=F, stringsAsFactors=F))#
#
        sums[,device_id:=device]#
        setnames(sums,1:3, c('datetime','unit','temp'))#
        #correct for fahrenheit files#
        tempunit <- unique(as.character(sums$unit))#
        if(tempunit==FALSE){sums[, temp:=round((5/9)*(sums$temp - 32),3)]}#
        #drop unit#
        sums[,unit:=NULL]#
        sums[,datetime:=mdy_hms(datetime, tz=tzone)]#
#
        if(roundTime){#
            interval <- as.numeric(sums[2, datetime] - sums[1, datetime])#
            sums[,datetime:=round.minutes(datetime,interval)]#
        }#
#
        if(makeLong){sums <- melt(sums, id.var=c('datetime','device_id'))}#
        if(saveFile & makeLong){write.csv(sums, row.names=F, file=paste(substring(x, 1, nchar(x)-4),'.import.long.csv',sep=''))}#
        if(saveFile & !makeLong){write.csv(sums, row.names=F, file=paste(substring(x, 1, nchar(x)-4),'.import.csv',sep=''))}#
        if(dataTable){sums} else (as.data.frame(sums))#
    }else{warning(paste("File", x, "does not contain valid iButton data", sep=" "))}#
}
inFileFix(x)
library(lubridate)#
library(plyr)#
library(ggplot2)#
library(data.table)#
library(reshape2)#
library(scales)#
library(devtools)#
library(splines)#
library(lme4)#
library(grid)#
library(dplyr)
x <- '~/Desktop/aPATS Flights/6 Jan 2015/PM00002I.TXT'
x
raw <- read.delim(x)#
#use a regular expression to identify lines that are data, denote the line number#
kLines <- as.numeric(sapply(raw, function(x) grep('[0-9/0-9/0-9]{2,} [0-9:]{6,},[0-9.,]{3,}',x)))#
#convert to character#
rare <- as.character(raw[kLines,])#
#create a tempfile and write to it#
fn <- tempfile()#
write(rare, file=fn)#
#read in using fread#
mediumwell <- fread(fn)#
#remove cruft#
unlink(fn)#
#
setnames(mediumwell, c('datetime', 'batt', 'temp.sys', 'temp.air', 'rh.air', 'temp.tr', 'temp.baro', 'altitude', 'usbpwr', 'fan', 'filter', 'rsd', 'low20', 'high320', 'nsample', 'low20avg', 'high320avg'))
a <- fread(x)
a <- fread('~/Desktop/PM00002I.TXT')
a
setnames(a, c('datetime', 'batt', 'temp.sys', 'temp.air', 'rh.air', 'temp.tr', 'temp.baro', 'altitude', 'usbpwr', 'fan', 'filter', 'rsd', 'low20', 'high320', 'nsample', 'low20avg', 'high320avg'))
a[,V1:=ymd_hms(V1,tz="Asia/Kolkata")]
a
a[V1>"2015-04-01"]
qplot(V1, V9, data=a[V1>"2015-04-01"])
qplot(V1, V7, data=a[V1>"2015-04-01"])
qplot(V1, V8, data=a[V1>"2015-04-01"])
qplot(V1, V8, data=a[V1>"2015-04-01"], geom='line')
qplot(V1, V2, data=a[V1>"2015-04-01"], geom='line')
qplot(V1, V3, data=a[V1>"2015-04-01"], geom='line')
qplot(V1, V4, data=a[V1>"2015-04-01"], geom='line')
qplot(V1, V5, data=a[V1>"2015-04-01"], geom='line')
qplot(V1, V7, data=a[V1>"2015-04-01"])
qplot(V1, V8, data=a[V1>"2015-04-01"])
qplot(V1, V9, data=a[V1>"2015-04-01"])
qplot(V1, V10, data=a[V1>"2015-04-01"])
setwd('~/Desktop/labulator')
library(shinyapps)
deployApp()
